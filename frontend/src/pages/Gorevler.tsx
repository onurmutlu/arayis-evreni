import React, { useState, useEffect, useCallback } from 'react';
import SayfaBasligi from '../components/SayfaBasligi';
import Buton from '../components/Buton';
import {
  Swords, Heart, ShieldCheck, Building, Zap,
  AlertCircle, Loader2, Lock, CheckCircle, Info, RefreshCw, Hourglass // Hourglass ikonu eklendi
} from 'lucide-react';
import { formatDistanceToNowStrict } from 'date-fns'; // Kalan s√ºre i√ßin
import { tr } from 'date-fns/locale';
// import { mockNFTData, NFT } from '../data/nftData'; // Lokal veri kaldƒ±rƒ±ldƒ±

// Backend'deki MissionState modeline uygun aray√ºz
interface MissionState {
  id: string; // G√∂rev ID'si artƒ±k string (JSON'dan geldiƒüi i√ßin)
  category: string; // JSON'dan gelen genel g√∂rev kategorisi (ikon i√ßin vb.) - EKLENDƒ∞
  title: string;
  description: string;
  required_nft_category: string | null;
  xp_reward: number; // Backend'den gelen isimle e≈üle≈üiyor
  unlocked: boolean;
  can_complete: boolean;
  last_completed: string | null; // Datetime string olarak gelebilir
  cooldown_hours: number; // Cooldown s√ºresi (JSON'dan)
}

// Backend'den gelen CompletedMissionInfo modeline uygun aray√ºz
interface CompletedMissionInfo {
    message: string;
    xp_earned: number;
    streak_bonus_xp?: number;
    streak_bonus_nft_earned?: string;
    new_level?: number;
}

// Bildirim kategorisine g√∂re ikon e≈üle≈ütirmesi (Bildirimler.tsx'den alƒ±nabilir veya burada tanƒ±mlanabilir)
// ≈ûimdilik g√∂rev tiplerine g√∂re ikonlarƒ± manuel e≈üle≈ütirelim (API yanƒ±tƒ±nda ikon bilgisi yoksa)
const categoryIcons: Record<string, React.ElementType> = {
  flirt: Heart,
  dao: ShieldCheck,
  guardian: Swords,
  city: Building,
  general: Info, // Genel kategori i√ßin
  default: Zap // Eƒüer kategori yoksa veya e≈üle≈ümiyorsa
};

// √ñrnek API base URL (yapƒ±landƒ±rmadan gelmeli)
const API_BASE_URL = 'http://127.0.0.1:8000'; // Veya environment variable

const Gorevler: React.FC = () => {
  const [missions, setMissions] = useState<MissionState[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [completingMissionId, setCompletingMissionId] = useState<string | null>(null);
  const [completionStatus, setCompletionStatus] = useState<{ message: string, type: 'success' | 'error' } | null>(null);
  // Sim√ºle edilmi≈ü kullanƒ±cƒ± ID'si
  const userId = 'user123'; 

  // G√∂revleri fetch eden fonksiyon
  const fetchUserMissions = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    // Completion status'u temizle
    setCompletionStatus(null); 
    try {
      const response = await fetch(`${API_BASE_URL}/missions/${userId}`);
      if (!response.ok) {
        let errorMsg = `G√∂revler alƒ±namadƒ±: ${response.status}`;
        try { const errData = await response.json(); errorMsg = errData.detail || errorMsg; } catch(e){}
        throw new Error(errorMsg);
      }
      const data: MissionState[] = await response.json();
      setMissions(data);
    } catch (err: any) {
      console.error("G√∂revler API'den √ßekilirken hata:", err);
      setError(err.message || "G√∂revler y√ºklenirken bir sorun olu≈ütu.");
    } finally {
      setIsLoading(false);
    }
  }, [userId]); // useCallback ile fonksiyonu memoize et

  // ƒ∞lk y√ºkleme ve g√∂rev tamamlama sonrasƒ± i√ßin useEffect
  useEffect(() => {
    fetchUserMissions();
  }, [fetchUserMissions]); // fetchUserMissions deƒüi≈ütiƒüinde √ßalƒ±≈üƒ±r

  // G√∂revi tamamlama fonksiyonu
  const handleCompleteMission = async (missionId: string) => {
    if (completingMissionId) return; // Zaten bir i≈ülem varsa engelle

    setCompletingMissionId(missionId);
    setCompletionStatus(null);
    setError(null); // √ñnceki genel hatalarƒ± temizle

    try {
      const response = await fetch(`${API_BASE_URL}/complete_mission/${userId}/${missionId}`, {
        method: 'POST'
      });

      const resultData = await response.json(); // Yanƒ±tƒ± her zaman oku

      if (!response.ok) {
        throw new Error(resultData.detail || `G√∂rev ${missionId} tamamlanamadƒ±: ${response.status}`);
      }

      const result: CompletedMissionInfo = resultData;
      
      // Ba≈üarƒ± mesajƒ± g√∂ster (Bonuslarƒ± i√ßerebilir)
      let successMessage = `${result.message} +${result.xp_earned} XP kazandƒ±n!`;
      if (result.streak_bonus_xp) {
          successMessage += ` üî• +${result.streak_bonus_xp} XP zincir bonusu!`;
      }
      if (result.streak_bonus_nft_earned) {
          successMessage += ` üéÅ Yeni bir mini-NFT kazandƒ±n! (${result.streak_bonus_nft_earned})`;
      }
       if (result.new_level) {
          successMessage += ` ‚ú® Tebrikler! Seviye ${result.new_level}'e y√ºkseldin!`;
      }
      setCompletionStatus({ message: successMessage, type: 'success' });

      // G√∂rev listesini yenile (cooldown durumunu g√ºncellemek i√ßin)
      await fetchUserMissions(); 
      // TODO: Profildeki XP/Level/Streak bilgisini de g√ºncellemek i√ßin global state veya context kullanƒ±labilir.

    } catch (err: any) {
      console.error(`G√∂rev ${missionId} tamamlanƒ±rken hata:`, err);
      setCompletionStatus({ message: err.message || "G√∂rev tamamlanƒ±rken bir hata olu≈ütu.", type: 'error' });
    } finally {
      setCompletingMissionId(null);
      // Ba≈üarƒ±/hata mesajƒ±nƒ± birka√ß saniye sonra kaldƒ±r
      setTimeout(() => setCompletionStatus(null), 5000);
    }
  };

  // Kalan cooldown s√ºresini hesapla ve formatla
  const getCooldownTimeLeft = (lastCompletedStr: string | null, cooldownHours: number): string | null => {
    if (!lastCompletedStr) return null;
    try {
      const lastCompletedDate = new Date(lastCompletedStr);
      const cooldownEndDate = new Date(lastCompletedDate.getTime() + cooldownHours * 60 * 60 * 1000);
      const now = new Date();

      if (now >= cooldownEndDate) return null; // Cooldown bitti

      // Kalan s√ºreyi formatla
      return formatDistanceToNowStrict(cooldownEndDate, { addSuffix: true, locale: tr });
    } catch (e) {
      console.error("Error parsing date for cooldown:", e);
      return null; // Tarih parse edilemezse cooldown yokmu≈ü gibi davran
    }
  };

  // Kategori adƒ±nƒ± daha okunabilir hale getir (opsiyonel)
  const getReadableCategoryName = (category: string | null): string => {
      if (!category) return '';
      const names: { [key: string]: string } = {
          guardian: "Muhafƒ±z",
          flirt: "Fl√∂rt",
          dao: "DAO",
          city: "≈ûehir",
          general: "Genel"
      };
      return names[category] || category;
  }

  return (
    <div className="p-4 max-w-4xl mx-auto pb-20">
      <SayfaBasligi title="Aktif G√∂revler" icon={Swords} />

      {/* Y√ºkleme durumu */} 
      {isLoading && (
         <div className="flex justify-center items-center py-10"> 
              <Loader2 size={32} className="animate-spin text-primary"/> 
              <span className="ml-3 text-lg text-textSecondary">G√∂revler y√ºkleniyor...</span> 
         </div> 
      )} 

      {/* Hata durumu */} 
      {!isLoading && error && ( 
        <div className="p-4 bg-error/10 text-error text-center rounded-lg mb-4 border border-error/30 flex flex-col sm:flex-row items-center justify-center"> 
            <div className="flex items-center mb-2 sm:mb-0">
                <AlertCircle size={20} className="mr-2 flex-shrink-0"/> 
                <span>{error}</span> 
            </div>
            {/* Basit yeniden deneme butonu */} 
            <Buton onClick={fetchUserMissions} size="sm" variant="ghost" className="ml-0 mt-2 sm:mt-0 sm:ml-4 text-error hover:bg-error/20"> 
                 <RefreshCw size={14} className="mr-1"/> Yeniden Dene 
            </Buton> 
        </div> 
      )} 

      {/* G√∂rev yoksa */} 
      {!isLoading && !error && missions.length === 0 && ( 
        <p className="text-center text-textSecondary mt-8">≈ûu anda sana uygun aktif g√∂rev bulunmamaktadƒ±r. Farklƒ± NFT'ler kazanarak yeni g√∂revler a√ßabilirsin!</p> 
      )} 

      {/* G√∂rev Tamamlama Durum Mesajƒ± */} 
      {completionStatus && (
          <div className={`p-3 mb-4 rounded-md text-center text-sm font-medium ${completionStatus.type === 'success' ? 'bg-success/10 text-success' : 'bg-error/10 text-error'}`}> 
            {completionStatus.message}
          </div>
      )}

      {/* G√∂rev listesi */} 
      {!isLoading && !error && missions.length > 0 && ( 
        <div className="space-y-4 mt-6"> 
          {missions.map((gorev) => {
              // Kategoriye veya ID'ye g√∂re ikon belirle
              const Icon = categoryIcons[gorev.required_nft_category || gorev.category || 'default'] || Zap;
              const isLocked = !gorev.unlocked; // API'den gelen deƒüere bak
              const isInCooldown = gorev.unlocked && !gorev.can_complete;
              const cooldownTimeLeft = isInCooldown ? getCooldownTimeLeft(gorev.last_completed, gorev.cooldown_hours) : null;
              const isCompletingThis = completingMissionId === gorev.id;

              return (
                <div 
                  key={gorev.id} 
                  className={`flex flex-col sm:flex-row items-start sm:items-center justify-between p-4 border rounded-lg shadow-sm transition-all ${isLocked ? 'bg-muted/50 border-border/50 opacity-70' : 'bg-card border-border hover:shadow-md'}`}
                > 
                  <div className="flex items-center mr-4 overflow-hidden flex-grow mb-3 sm:mb-0"> 
                      <Icon size={24} className={`mr-4 flex-shrink-0 ${isLocked ? 'text-textMuted' : 'text-primary'}`}/> 
                      <div className="flex-grow"> 
                          <h3 className={`text-md font-semibold ${isLocked ? 'text-textMuted' : 'text-text'} truncate`} title={gorev.title}>{gorev.title}</h3> 
                          <p className={`text-sm ${isLocked ? 'text-textMuted' : 'text-textSecondary'} whitespace-normal`}>{gorev.description}</p> 
                      </div> 
                  </div> 

                  <div className="text-right ml-auto flex-shrink-0 flex flex-col sm:flex-row items-end sm:items-center w-full sm:w-auto"> 
                      <p className={`text-lg font-bold ${isLocked || isInCooldown ? 'text-textMuted' : 'text-primary'} mr-0 sm:mr-4 mb-2 sm:mb-0`}>+{gorev.xp_reward} XP</p> 
                      {isLocked ? (
                          <div className="flex items-center text-xs text-textMuted px-2 py-1 bg-background rounded border border-border">
                              <Lock size={14} className="mr-1.5" />
                              {gorev.required_nft_category 
                                ? `${getReadableCategoryName(gorev.required_nft_category)} NFT Gerekli` 
                                : 'Kilitli'} 
                          </div>
                      ) : isInCooldown ? (
                         <div className="flex items-center text-xs text-textMuted px-2 py-1 bg-background rounded border border-border" title={`Son Tamamlama: ${gorev.last_completed ? new Date(gorev.last_completed).toLocaleString() : 'N/A'}`}>
                              <Hourglass size={14} className="mr-1.5" />
                              {cooldownTimeLeft ? `${cooldownTimeLeft} kaldƒ±` : 'Cooldown'} 
                          </div>
                      ) : (
                          <Buton 
                              size="sm" 
                              variant="primary"
                              onClick={() => handleCompleteMission(gorev.id)} 
                              disabled={isCompletingThis || !!completingMissionId} // Kendi i≈ülemi veya ba≈üka bir i≈ülem s√ºr√ºyorsa
                              className="w-full sm:w-auto min-w-[140px] flex items-center justify-center"
                          >
                              {isCompletingThis ? (
                                  <Loader2 size={16} className="animate-spin mr-1.5" />
                              ) : (
                                  <CheckCircle size={16} className="mr-1.5" />
                              )}
                              {isCompletingThis ? 'Tamamlanƒ±yor...' : 'G√∂revi Tamamla'}
                          </Buton>
                      )} 
                  </div> 
                </div> 
              );
          })} 
        </div> 
      )} 
    </div> 
  ); 
};

export default Gorevler; 